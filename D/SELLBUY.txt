BUY_VEHICLE.TXT:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Filtered Vehicles</title>
</head>
<body>
    <h1>Filtered Vehicles</h1>

    {% if vehicles %}
        <ul>
            {% for vehicle in vehicles %}
                <li>
                    {{ vehicle.type_of_vehicle }} - {{ vehicle.brand }} - {{ vehicle.model_name }} -
                    {{ vehicle.kilometers }} km - {{ vehicle.base_price }}
                    <br>
                    Contact: {{ vehicle.contact_number }}
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No vehicles match your criteria.</p>
    {% endif %}
</body>
</html>

BUY-VEHICLE-FORM.HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Buy Vehicle</title>
</head>
<body>
    <h1>Find Your Desired Vehicle</h1>

    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Search</button>
    </form>
</body>
</html>

DISPLAY.HTML:

<!DOCTYPE html>
<html>

<head>
    <title>Car Details</title>
</head>
<body>
{% for d in form %}
Base price:{{d.base_price}}<br>
type of vehicle:{{d.type_of_vehicle}}<br>
no of owners:{{d.number_of_owners}}<br>
Brand:{{d.brand}}<br>
model name:{{d.model_name}}<br>
kilometers:{{d.kilometers}}<br><br>

{% endfor %}

</body>
</html>

SELL_VEHICLE.HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sell Vehicle</title>
</head>
<body>
    <h1>Sell Your Vehicle</h1>

    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
</body>
</html>


MODELS.PY:

# vehicles/models.py
from django.db import models

class Vehicle(models.Model):
    name = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=15)
    type_of_vehicle = models.CharField(max_length=10)  # Car or Motorbike
    brand = models.CharField(max_length=50)
    model_name = models.CharField(max_length=50)
    year_of_purchase = models.IntegerField()
    kilometers = models.IntegerField()
    color = models.CharField(max_length=50)
    registered_state = models.CharField(max_length=2)
    number_of_owners = models.IntegerField()
    base_price = models.DecimalField(max_digits=10, decimal_places=2)
    mode_of_payment = models.CharField(max_length=50)

FORMS.PY:

# vehicles/forms.py
from django import forms
from .models import Vehicle

class SellForm(forms.ModelForm):
    class Meta:
        model = Vehicle
        fields='__all__'
        #exclude = ['type_of_vehicle']

class BuyForm(forms.Form):
    type_of_vehicle = forms.ChoiceField(choices=[('Car', 'Car'), ('Motorbike', 'Motorbike')])
    brand = forms.CharField(max_length=50)
    kilometers = forms.IntegerField()
    number_of_owners = forms.IntegerField(required=False)
    expected_price_range = forms.IntegerField()


VIEWS.PY:

# vehicles/views.py
from decimal import Decimal

from django.shortcuts import render, redirect
from .forms import SellForm, BuyForm
from .models import Vehicle
from django.http import HttpResponse

def sell_vehicle(request):
    if request.method == 'POST':
        form = SellForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return HttpResponse('sell_success')
    else:
        form = SellForm()
    return render(request, 'sell_vehicle.html', {'form': form})

def displayvehicle(request):
    form=Vehicle.objects.all()
    return render(request,'display.html',context={'form':form})
def buy_vehicle(request):
    if request.method == 'POST':
        form = BuyForm(request.POST)
        if form.is_valid():
            type_of_vehicle = form.cleaned_data['type_of_vehicle']
            brand = form.cleaned_data['brand']
            kilometers = form.cleaned_data['kilometers']
            number_of_owners = form.cleaned_data['number_of_owners']
            expected_price_range = form.cleaned_data['expected_price_range']

            # Filter vehicles based on the form data
            filtered_vehicles = Vehicle.objects.filter(
                type_of_vehicle=type_of_vehicle,
                brand=brand,
                kilometers=kilometers,
            )
            if number_of_owners>0:

                filtered_vehicles = filtered_vehicles.filter(number_of_owners=number_of_owners)
            filtered_vehicles = filtered_vehicles.filter(base_price__lt=Decimal(expected_price_range))

            return render(request, 'buy_vehicle.html', {'vehicles': filtered_vehicles})
    else:
        form = BuyForm()
    return render(request, 'buy_vehicle_form.html', {'form': form})


URLS.PY:
# vehicles/urls.py
from django.urls import path
from .views import sell_vehicle, buy_vehicle, displayvehicle

urlpatterns = [
    path('sell/', sell_vehicle, name='sell_vehicle'),
    path('buy/', buy_vehicle, name='buy_vehicle'),
    path('display/',displayvehicle)
]
